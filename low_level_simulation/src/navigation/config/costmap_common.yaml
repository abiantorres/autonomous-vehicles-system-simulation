# Robot radius calculated from the circle defined by the
# point model robot. (Square shape)
robot_radius: 0.55

####################################
#Coordinate frame and tf parameters#
####################################

# The global frame for the costmap to operate in.
#global_frame: /map
# The name of the frame for the base link of the robot.
#robot_base_frame: base_link
# Specifies the delay in transform (tf) data that is tolerable in seconds.
# This parameter serves as a safeguard to losing a link in the tf tree while
# still allowing an amount of latency the user is comfortable with to exist in
# the system. For example, a transform being 0.2 seconds out-of-date may be tolerable,
# but a transform being 8 seconds out of date is not. If the tf transform between
# the coordinate frames specified by the global_frame and robot_base_frame parameters
# is transform_tolerance seconds older than ros::Time::now(), then the navigation
# stack will stop the robot.
transform_tolerance: 0.5

####################################
#Coordinate frame and tf parameters#
####################################
# The frequency in Hz for the map to be updated.
#update_frequency: 5.0
# The frequency in Hz for the map to be publish display information.
#publish_frequency: 1.0

#obstacle_layer:
#  enabled: true
obstacle_range: 2.5
raytrace_range: 3.0
#  track_unknown_space: false
# combination_method: 1
observation_sources: laser_scan_sensor
laser_scan_sensor: {sensor_frame: hokuyo, data_type: LaserScan, topic: /vehicle/laser/scan, marking: true, clearing: true}

#inflation_layer:
  #enabled: true
inflation_radius: 0.5
cost_scaling_factor: 1.0

#static_layer:
#enabled: true
