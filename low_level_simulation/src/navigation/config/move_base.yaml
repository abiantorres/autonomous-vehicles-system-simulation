#############
# move_base #
#############

# The move_base node provides a ROS interface for configuring, running, and
# interacting with the navigation stack on a robot. A high-level view of the move_base
# node and its interaction with other components is shown above. The blue vary based
# on the robot platform, the gray are optional but are provided for all systems, and
# the white nodes are required but also provided for all systems. For more information
# on configuration of the move_base node, and the navigation stack as a whole, please
# see the navigation setup and configuration tutorial.

# The name of the plugin for the local planner to use with move_base see pluginlib
# documentation for more details on plugins. This plugin must adhere to the
# nav_core::BaseLocalPlanner interface specified in the nav_core package.
# (1.0 series default: "TrajectoryPlannerROS")
base_local_planner: "dwa_local_planner/DWAPlannerROS"
#base_local_planner: "teb_local_planner/TebLocalPlannerROS"

# The name of the plugin for the global planner to use with move_base,
# see pluginlib documentation for more details on plugins. This plugin
# must adhere to the nav_core::BaseGlobalPlanner interface specified in
# the nav_core package. (1.0 series default: "NavfnROS")
base_global_planner: "global_planner/GlobalPlanner"

# The rate in Hz at which to run the control loop and send velocity commands to the base.
controller_frequency: 3.0
# How long the planner will wait in seconds in an attempt to
# find a valid plan before space-clearing operations are performed.
planner_patience: 2.0
# How long the controller will wait in seconds without receiving a valid
# control before space-clearing operations are performed.
controller_patience: 5.0
# The distance away from the robot in meters at which obstacles will
# be cleared from the costmap when attempting to clear space in the map.
# Note, this parameter is only used when the default recovery behaviors are used for move_base.
conservative_reset_dist: 3.0
# Whether or not to enable the move_base recovery behaviors to attempt to clear out space.
recovery_behavoir_enabled: true
# Determines whether or not the robot will attempt an in-place rotation when
# attempting to clear out space. Note: This parameter is only used when the default
# recovery behaviors are in use, meaning the user has not set the recovery_behaviors
# parameter to anything custom.
clearing_rotation_allowed: false
# Determines whether or not to shutdown the costmaps of the node when move_base is in an inactive state.
shutdown_costmaps: false
# How long in seconds to allow for oscillation before executing recovery behaviors.
# A value of 0.0 corresponds to an infinite timeout. New in navigation 1.3.1
oscillation_timeout: 0.0
# How far in meters the robot must move to be considered not to be oscillating.
# Moving this far resets the timer counting up to the ~oscillation_timeout New in navigation 1.3.1
oscillation_distance: 0.5
# The rate in Hz at which to run the global planning loop. If the frequency is set to 0.0,
# the global planner will only run when a new goal is received or the local planner reports
# that its path is blocked. New in navigation 1.6.0
planner_frequency: 100000.0
# How many times to allow for planning retries before executing recovery behaviors.
# A value of -1.0 corresponds to an infinite retries.
max_planning_retries: 1

# A list of recovery behavior plugins to use with move_base,
# see pluginlib documentation for more details on plugins.
# These behaviors will be run when move_base fails to find a
# valid plan in the order that they are specified. After each
# behavior completes, move_base will attempt to make a plan.
# If planning is successful, move_base will continue normal
# operation. Otherwise, the next recovery behavior in the
# list will be executed. These plugins must adhere to the
# nav_core::RecoveryBehavior interface specified in the
# nav_core package. (1.0 series default:
# [{name: conservative_reset, type: ClearCostmapRecovery},
# {name: rotate_recovery, type: RotateRecovery},
# {name: aggressive_reset, type: ClearCostmapRecovery}]).
# Note: For the default parameters, the aggressive_reset
# behavior will clear out to a distance of 4 * ~/local_costmap/circumscribed_radius.

recovery_behaviors:
  - name: 'super_conservative_reset'
    type: 'clear_costmap_recovery/ClearCostmapRecovery'
  - name: 'conservative_reset'
    type: 'clear_costmap_recovery/ClearCostmapRecovery'
  - name: 'aggressive_reset'
    type: 'clear_costmap_recovery/ClearCostmapRecovery'
  - name: 'move_slow_and_clear'
    type: 'move_slow_and_clear/MoveSlowAndClear'

super_conservative_reset:
  reset_distance: 5.0

conservative_reset:
  reset_distance: 3.0

aggressive_reset:
  reset_distance: 1.84

move_slow_and_clear:
  clearing_distance: 0.5
  limited_trans_speed: 0.25
  limited_rot_speed: 0.45
  limited_distance: 0.3
