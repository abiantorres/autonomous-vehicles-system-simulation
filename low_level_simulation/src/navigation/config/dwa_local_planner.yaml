
###################
#dwa_local_planner#
###################

# The dwa_local_planner package provides a controller that drives
# a mobile base in the plane. This controller serves to connect the
# path planner to the robot. Using a map, the planner creates a kinematic
# trajectory for the robot to get from a start to a goal location. Along the way,
# the planner creates, at least locally around the robot, a value function, represented
# as a grid map. This value function encodes the costs of traversing through the grid cells.
# The controller's job is to use this value function to determine dx,dy,dtheta velocities to
# send to the robot.

# The basic idea of the Dynamic Window Approach (DWA) algorithm is as follows:

# - Discretely sample in the robot's control space (dx,dy,dtheta)
# - For each sampled velocity, perform forward simulation from the robot's
#   current state to predict what would happen if the sampled velocity were applied
#   for some (short) period of time.
# - Evaluate (score) each trajectory resulting from the forward simulation,
#   using a metric that incorporates characteristics such as: proximity to obstacles,
#   proximity to the goal, proximity to the global path, and speed. Discard illegal
#   trajectories (those that collide with obstacles).
# - Pick the highest-scoring trajectory and send the associated velocity to the mobile base.
# - Rinse and repeat.

DWAPlannerROS:

  ################################
  #Robot Configuration Parameters#
  ################################

  # The x acceleration limit of the robot in meters/sec^2
  acc_lim_x: 1.0
  # The y acceleration limit of the robot in meters/sec^2
  #####################################
  # VERY IMPORTANT - DIFF ROBOT DRIVE #
  #####################################
  acc_lim_y: 0.0
  acc_lim_trans: 1.0
  # The rotational acceleration limit of the robot in radians/sec^2
  acc_lim_theta: 10.0
  # The absolute value of the maximum translational velocity for the robot in m/s
  max_trans_vel: 0.8
  # The absolute value of the minimum translational velocity for the robot in m/s
  min_trans_vel: 0.1
  # The maximum x velocity for the robot in m/s.
  max_vel_x: 0.8
  # The minimum x velocity for the robot in m/s, negative for backwards motion.
  min_vel_x: -0.2 # -1.0
  # The maximum y velocity for the robot in m/s
  #####################################
  # VERY IMPORTANT - DIFF ROBOT DRIVE #
  #####################################
  max_vel_y: 0.0
  # The minimum y velocity for the robot in m/s
  #####################################
  # VERY IMPORTANT - DIFF ROBOT DRIVE #
  #####################################
  min_vel_y: 0.0
  # The absolute value of the maximum rotational velocity for the robot in rad/s
  # # 0.1 rad/sec = 5.7 degree/sec
  max_rot_vel: 5.0
  # The absolute value of the minimum rotational velocity for the robot in rad/s
  min_rot_vel: 0.4

  # Speed used for driving during escapes in meters/sec. Note that it must be negative
  # in order for the robot to actually reverse. A positive speed will cause the robot
  # to move forward while attempting to escape. New in navigation 1.3.1
  #escape_vel: -0.1

  # A robot is holonomic if all the constraints that it is subjected to are integrable
  # into positional constraints of the form:

  # {\displaystyle f(q_{1},q_{2},...,q_{n};t)=0} {\displaystyle f(q_{1},q_{2},...,q_{n};t)=0}
  # The variables {\displaystyle q_{i}} q_{i} are the system coordinates.
  # When a system contains constraints that cannot be written in this form, it is to be nonholonomic.

  # In simpler terms, a holonomic system is when the number of controllable degrees of freedom
  # is equal to the total degrees of freedom.

  # Determines whether velocity commands are generated for a holonomic or non-holonomic
  # robot. For holonomic robots, strafing velocity commands may be issued to the base.
  # For non-holonomic robots, no strafing velocity commands will be issued.

  ##################
  # VERY IMPORTANT #
  ##################
  holonomic_robot: false

  ###########################
  #Goal Tolerance Parameters#
  ###########################

  # The tolerance in radians for the controller in yaw/rotation when achieving its goal
  yaw_goal_tolerance: 0.7
  # The tolerance in meters for the controller in the x & y distance when achieving a goal
  xy_goal_tolerance: 0.8
  # If goal tolerance is latched, if the robot ever reaches the goal xy location it will
  # simply rotate in place, even if it ends up outside the goal tolerance while it is doing so.
  latch_xy_goal_tolerance: true

  ###############################
  #Forward Simulation Parameters#
  ###############################

  # The amount of time to forward-simulate trajectories in seconds
  sim_time: 1.7
  # The step size, in meters, to take between points on a given trajectory
  #sim_granularity: 0.025
  # The number of samples to use when exploring the x velocity space
  vx_samples: 20
  # The number of samples to use when exploring the y velocity space
  #####################################
  # VERY IMPORTANT - DIFF ROBOT DRIVE #
  #####################################
  # Diff drive robot, there is only one sample
  vy_samples: 1
  # The number of samples to use when exploring the theta velocity space
  vth_samples: 40
  # The frequency at which this controller will be called in Hz. Uses searchParam
  # to read the parameter from parent namespaces if not set in the namespace of the
  # controller. For use with move_base, this means that you only need to set its
  # "controller_frequency" parameter and can safely leave this one unset.
  #########################################################
  # TODO: Doesn't works, check base_local_planner version #
  #########################################################
  #controller_frequency: 20.0

  ###############################
  #Trajectory Scoring Parameters#
  ###############################

  # cost =
  #  path_distance_bias * (distance to path from the endpoint of the trajectory in meters)
  #  + goal_distance_bias * (distance to local goal from the endpoint of the trajectory in meters)
  #  + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))

  # The weighting for how much the controller should stay close to the path it was given
  #############
  # IMPORTANT #
  #############
  path_distance_bias: 64
  # The weighting for how much the controller
  # should attempt to reach its local goal, also controls speed
  #############
  # IMPORTANT #
  #############
  goal_distance_bias: 24
  # The weighting for how much the controller should attempt to avoid obstacles
  occdist_scale: 0.5
  # The distance from the center point of the robot to place an additional scoring point, in meters
  forward_point_distance: 0.325
  # How far to look ahead in meters when scoring different in-place-rotation trajectories
  #heading_lookahead: 0.5
  # Whether to score based on the robot's heading to the path or its distance from the path
  #heading_scoring: true
  # How far to look ahead in time in seconds along the simulated trajectory when using heading scoring
  #heading_scoring_timestep: 1.5
  # How far the robot must travel in meters before oscillation flags are reset
  #oscillation_reset_dist: 0.05
  # The amount of time that the robot must stop before a collision in order for a
  # trajectory to be considered valid in seconds
  stop_time_buffer: 0.2
  # The absolute value of the velocity at which to start scaling the robot's footprint, in m/s
  scaling_speed: 0.25
  # The maximum factor to scale the robot's footprint by
  max_scaling_factor: 0.2
  # If true, distances are expressed in meters; otherwise grid cells
  #meter_scoring: true
  # Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout
  # (NOTE: In our experience DWA worked as well as Trajectory Rollout and is computationally
  # less expensive. It is possible that robots with extremely poor acceleration limits could
  # gain from running Trajectory Rollout, but we recommend trying DWA first.)
  ##################
  # VERY IMPORTANT #
  ##################
  #dwa: true
  # The frame to set for the cost_cloud. Should be set to the same frame as the
  # local costmap's global frame. New in navigation 1.4.0
  global_frame_id: odom



  ###################################
  #Oscillation Prevention Parameters#
  ###################################

  # How far the robot must travel in meters before oscillation flags are reset
  oscillation_reset_dist: 0.05
  oscillation_reset_angle: 0.2
  ########################
  #Global Plan Parameters#
  ########################

  # Defines whether or not to eat up the plan as the robot moves along the path. If set to
  # true, points will fall off the end of the plan once the robot moves 1 meter past them.
  prune_plan: false

  ###########################
  # TODO: Check information #
  ###########################

  trans_stopped_vel: 0.1
  publish_traj_pc : true
  publish_cost_grid_pc: true
  sim_granularity: 0.025
  angular_sim_granularity: 0.1
  twirling_scale: 0.0
  #frecuency: 20
  use_dwa: true
  restore_defaults: false
  rot_stopped_vel: 0.4
  penalize_negative_x: false
