##################
# global_planner #
##################

# This package provides an implementation of a fast, interpolated global planner 
# for navigation. This class adheres to the nav_core::BaseGlobalPlanner interface 
# specified in the nav_core package. It was built as a more flexible replacement 
# to navfn, which in turn is based on NF1.

GlobalPlanner:
  
  # Specifies whether or not to allow the planner to create plans that traverse 
  # unknown space. NOTE: if you are using a layered costmap_2d costmap with a
  #  voxel or obstacle layer, you must also set the track_unknown_space param 
  # for that layer to be true, or it will convert all your unknown space to free 
  # space (which planner will then happily go right through).
  allow_unknown: true
  # A tolerance on the goal point for the planner. The planner will attempt
  # to create a plan that is as close to the specified goal as possible but
  # no further than default_tolerance away.
  default_tolerance: 0.05
  # Specifies whether or not to visualize the potential area computed via a PointCloud2.
  visualize_potential: true
  # If true, use dijkstra's algorithm. Otherwise, A*.
  use_dijkstra: true
  # If true, use the quadratic approximation of the potential. Otherwise, use a simpler calculation.
  use_quadratic: true
  # If true, create a path that follows the grid boundaries. Otherwise, use a gradient descent method.
  use_grid_path: false
  # If for some reason, you want global_planner to exactly mirror the behavior of navfn,
  # set this to true (and use the defaults for the other boolean parameters)
  old_navfn_behavoir: false

  planner_window_x: 0.0
  planner_window_y: 0.0

  publish_scale: 100
  planner_costmap_publish_frecuency: 0.2

  lethal_cost: 253
  neutral_cost: 66
  cost_factor: 0.55