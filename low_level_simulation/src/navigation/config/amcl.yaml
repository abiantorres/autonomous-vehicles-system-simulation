########
# amcl #
########

# Many of the algorithms and their parameters are well-described in the book 
# Probabilistic Robotics, by Thrun, Burgard, and Fox. The user is advised to 
# check there for more detail. In particular, we use the following algorithms 
# from that book: sample_motion_model_odometry, beam_range_finder_model, 
# likelihood_field_range_finder_model, Augmented_MCL, and KLD_Sampling_MCL.

# As currently implemented, this node works only with laser scans and laser maps.
# It could be extended to work with other sensor data.

#############################
# Overall filter parameters #
#############################
# Minimum allowed number of particles.
min_particles:        100       
# Maximum allowed number of particles.
max_particles:        10000  
# Maximum error between the true distribution and the estimated distribution.   
kld_err:              0.05      
# Upper standard normal quantile for (1 - p), where p is the probability 
# that the error on the estimated distrubition will be less than kld_err.
kld_z:                0.99      
# Translational movement required before performing a filter update.
update_min_d:         0.1       
# Rotational movement required before performing a filter update.
update_min_a:         0.5235    
# Number of filter updates required before resampling.
resample_interval:    1       
# Time with which to post-date the transform that is published,
# to indicate that this transform is valid into the future.
transform_tolerance:  0.1      
# Exponential decay rate for the slow average weight filter, 
# used in deciding when to recover by adding random poses. A good value might be 0.001.
recovery_alpha_slow:  0.001     
# Exponential decay rate for the fast average weight filter, used in deciding when to 
# recover by adding random poses. A good value might be 0.1.
recovery_alpha_fast:  0.1   
# Initial pose mean (x), used to initialize filter with Gaussian distribution.    
initial_pose_x:       0.0       
# Initial pose mean (y), used to initialize filter with Gaussian distribution.
initial_pose_y:       0.0       
# Initial pose mean (yaw), used to initialize filter with Gaussian distribution.
initial_pose_a:       0.0       
# Initial pose covariance (x*x), used to initialize filter with Gaussian distribution.
initial_cov_xx:       0.25     
# Initial pose covariance (y*y), used to initialize filter with Gaussian distribution.
initial_cov_yy:       0.25      
# Initial pose covariance (yaw*yaw), used to initialize filter with Gaussian distribution.
initial_cov_aa:       0.06853   
# Maximum rate (Hz) at which scans and paths are published for visualization, -1.0 to disable.
gui_publish_rate:     10.0      
# Maximum rate (Hz) at which to store the last estimated pose and covariance to the parameter 
# server, in the variables ~initial_pose_* and ~initial_cov_*. This saved pose will be used 
# on subsequent runs to initialize the filter. -1.0 to disable.
save_pose_rate:       0.5       # 0.5
# When set to true, AMCL will subscribe to the map topic rather than making a service 
# call to receive its map. New in navigation 1.4.2
use_map_topic:        true      
# When set to true, AMCL will only use the first map it subscribes to, rather than
# updating each time a new one is received. New in navigation 1.4.2
first_map_only:       false     

##########################
# Laser model parameters #
##########################
# Minimum scan range to be considered; -1.0 will cause the laser's reported minimum range to be used.
laser_min_range:            -1.0   
# Maximum scan range to be considered; -1.0 will cause the laser's reported maximum range to be used.
laser_max_range:            -1.0  
# How many evenly-spaced beams in each scan to be used when updating the filter. 
laser_max_beams:            180 
# Mixture weight for the z_hit part of the model.   
laser_z_hit:                0.95
# Mixture weight for the z_short part of the model.   
laser_z_short:              0.1
# Mixture weight for the z_max part of the model.
laser_z_max:                0.05   
# Mixture weight for the z_rand part of the model.
laser_z_rand:               0.05  
# Standard deviation for Gaussian model used in z_hit part of the model. 
laser_sigma_hit:            0.2 
# Exponential decay parameter for z_short part of model.   
laser_lambda_short:         0.1    
# Maximum distance to do obstacle inflation on map, for use in likelihood_field model.
laser_likelihood_max_dist:  2.0    
# Which model to use, either beam, likelihood_field, or likelihood_field_prob 
# (same as likelihood_field but incorporates the beamskip feature, if enabled).
laser_model_type:           likelihood_field

##############################
# Odometery model parameters #
##############################

# If ~odom_model_type is "diff" then we use the sample_motion_model_odometry algorithm from 
# Probabilistic Robotics, p136; this model uses the noise parameters odom_alpha_1 through
# odom_alpha4, as defined in the book.

# If ~odom_model_type is "omni" then we use a custom model for an omni-directional base, 
# which uses odom_alpha_1 through odom_alpha_5. The meaning of the first four parameters 
# is similar to that for the "diff" model. The fifth parameter capture the tendency of the
# robot to translate (without rotating) perpendicular to the observed direction of travel.

##################################### 
# VERY IMPORTANT - DIFF ROBOT DRIVE #
#####################################
# A bug was found and fixed. But fixing the old models would have changed or broken 
# the localisation of already tuned robot systems, so the new fixed odometry models 
# were added as new types "diff-corrected" and "omni-corrected". The default settings
# of the odom_alpha parameters only fit the old models, for the new model these values
# probably need to be a lot smaller, 
# see http://answers.ros.org/question/227811/tuning-amcls-diff-corrected-and-omni-corrected-odom-models/.

# Which model to use, either "diff", "omni", "diff-corrected" or "omni-corrected".
odom_model_type:  diff-corrected
# Specifies the expected noise in odometry's rotation estimate from the rotational 
# component of the robot's motion.
#odom_alpha1:      0.005  
# Specifies the expected noise in odometry's rotation estimate 
# from translational component of the robot's motion. 
#odom_alpha2:      0.005 
# Specifies the expected noise in odometry's translation estimate 
# from the translational component of the robot's motion.  
#odom_alpha3:      0.010    
# Specifies the expected noise in odometry's translation estimate 
# from the rotational component of the robot's motion.
#odom_alpha4:      0.005  
# Translation-related noise parameter (only used if model is "omni").
#odom_alpha5:      0.003  
# Which frame to use for odometry.  
odom_frame_id:    odom 
# Which frame to use for the robot base
base_frame_id:    base_link 
# The name of the coordinate frame published by the localization system
global_frame_id:  map 
# Set this to false to prevent amcl from publishing the transform 
# between the global frame and the odometry frame.
tf_broadcast: true

odom_alpha1:      0.5    # 0.2 rr
odom_alpha2:      0.25   # 0.2 rt
odom_alpha3:      0.6    # 0.2,0.8 tt
odom_alpha4:      0.25   # 0.2 tr
odom_alpha5:      0.2    # 0.2,0.1