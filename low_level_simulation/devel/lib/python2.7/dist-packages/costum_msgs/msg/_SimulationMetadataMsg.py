# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from costum_msgs/SimulationMetadataMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SimulationMetadataMsg(genpy.Message):
  _md5sum = "6204327964663f21015d923ee7818638"
  _type = "costum_msgs/SimulationMetadataMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string plan_file
string date
int64 n_segments
int64 n_iterations
int64 simulation_timeout
float64 distance_between_obstacles
bool useful_simulation
string local_planner
string global_planner
"""
  __slots__ = ['plan_file','date','n_segments','n_iterations','simulation_timeout','distance_between_obstacles','useful_simulation','local_planner','global_planner']
  _slot_types = ['string','string','int64','int64','int64','float64','bool','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       plan_file,date,n_segments,n_iterations,simulation_timeout,distance_between_obstacles,useful_simulation,local_planner,global_planner

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SimulationMetadataMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.plan_file is None:
        self.plan_file = ''
      if self.date is None:
        self.date = ''
      if self.n_segments is None:
        self.n_segments = 0
      if self.n_iterations is None:
        self.n_iterations = 0
      if self.simulation_timeout is None:
        self.simulation_timeout = 0
      if self.distance_between_obstacles is None:
        self.distance_between_obstacles = 0.
      if self.useful_simulation is None:
        self.useful_simulation = False
      if self.local_planner is None:
        self.local_planner = ''
      if self.global_planner is None:
        self.global_planner = ''
    else:
      self.plan_file = ''
      self.date = ''
      self.n_segments = 0
      self.n_iterations = 0
      self.simulation_timeout = 0
      self.distance_between_obstacles = 0.
      self.useful_simulation = False
      self.local_planner = ''
      self.global_planner = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.plan_file
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3qdB().pack(_x.n_segments, _x.n_iterations, _x.simulation_timeout, _x.distance_between_obstacles, _x.useful_simulation))
      _x = self.local_planner
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.global_planner
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.plan_file = str[start:end].decode('utf-8')
      else:
        self.plan_file = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.date = str[start:end].decode('utf-8')
      else:
        self.date = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.n_segments, _x.n_iterations, _x.simulation_timeout, _x.distance_between_obstacles, _x.useful_simulation,) = _get_struct_3qdB().unpack(str[start:end])
      self.useful_simulation = bool(self.useful_simulation)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.local_planner = str[start:end].decode('utf-8')
      else:
        self.local_planner = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_planner = str[start:end].decode('utf-8')
      else:
        self.global_planner = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.plan_file
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3qdB().pack(_x.n_segments, _x.n_iterations, _x.simulation_timeout, _x.distance_between_obstacles, _x.useful_simulation))
      _x = self.local_planner
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.global_planner
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.plan_file = str[start:end].decode('utf-8')
      else:
        self.plan_file = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.date = str[start:end].decode('utf-8')
      else:
        self.date = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.n_segments, _x.n_iterations, _x.simulation_timeout, _x.distance_between_obstacles, _x.useful_simulation,) = _get_struct_3qdB().unpack(str[start:end])
      self.useful_simulation = bool(self.useful_simulation)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.local_planner = str[start:end].decode('utf-8')
      else:
        self.local_planner = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_planner = str[start:end].decode('utf-8')
      else:
        self.global_planner = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3qdB = None
def _get_struct_3qdB():
    global _struct_3qdB
    if _struct_3qdB is None:
        _struct_3qdB = struct.Struct("<3qdB")
    return _struct_3qdB
