# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from costum_msgs/PathInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import costum_msgs.msg

class PathInfo(genpy.Message):
  _md5sum = "c8ed68422d316510dcf75afd6187c8cc"
  _type = "costum_msgs/PathInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string plan_file
string date
int16 simulations
float64 global_time_average
float64 global_distance_average
float64 global_velocity_average
float64 global_linear_velocity_average
float64 global_maximum_linear_velocity
int16 global_failures
string global_planner
string local_planner
GoalInfo[] sections
================================================================================
MSG: costum_msgs/GoalInfo
string id
float64 time_average
float64 distance_average
float64 velocity_average
float64 linear_velocity_average
float64 maximum_linear_velocity
float64 density
float64 max_obstacle_shiftment
float64 obstacle_length
int16 failures"""
  __slots__ = ['plan_file','date','simulations','global_time_average','global_distance_average','global_velocity_average','global_linear_velocity_average','global_maximum_linear_velocity','global_failures','global_planner','local_planner','sections']
  _slot_types = ['string','string','int16','float64','float64','float64','float64','float64','int16','string','string','costum_msgs/GoalInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       plan_file,date,simulations,global_time_average,global_distance_average,global_velocity_average,global_linear_velocity_average,global_maximum_linear_velocity,global_failures,global_planner,local_planner,sections

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.plan_file is None:
        self.plan_file = ''
      if self.date is None:
        self.date = ''
      if self.simulations is None:
        self.simulations = 0
      if self.global_time_average is None:
        self.global_time_average = 0.
      if self.global_distance_average is None:
        self.global_distance_average = 0.
      if self.global_velocity_average is None:
        self.global_velocity_average = 0.
      if self.global_linear_velocity_average is None:
        self.global_linear_velocity_average = 0.
      if self.global_maximum_linear_velocity is None:
        self.global_maximum_linear_velocity = 0.
      if self.global_failures is None:
        self.global_failures = 0
      if self.global_planner is None:
        self.global_planner = ''
      if self.local_planner is None:
        self.local_planner = ''
      if self.sections is None:
        self.sections = []
    else:
      self.plan_file = ''
      self.date = ''
      self.simulations = 0
      self.global_time_average = 0.
      self.global_distance_average = 0.
      self.global_velocity_average = 0.
      self.global_linear_velocity_average = 0.
      self.global_maximum_linear_velocity = 0.
      self.global_failures = 0
      self.global_planner = ''
      self.local_planner = ''
      self.sections = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.plan_file
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_h5dh().pack(_x.simulations, _x.global_time_average, _x.global_distance_average, _x.global_velocity_average, _x.global_linear_velocity_average, _x.global_maximum_linear_velocity, _x.global_failures))
      _x = self.global_planner
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.local_planner
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.sections)
      buff.write(_struct_I.pack(length))
      for val1 in self.sections:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_8dh().pack(_x.time_average, _x.distance_average, _x.velocity_average, _x.linear_velocity_average, _x.maximum_linear_velocity, _x.density, _x.max_obstacle_shiftment, _x.obstacle_length, _x.failures))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.sections is None:
        self.sections = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.plan_file = str[start:end].decode('utf-8')
      else:
        self.plan_file = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.date = str[start:end].decode('utf-8')
      else:
        self.date = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.simulations, _x.global_time_average, _x.global_distance_average, _x.global_velocity_average, _x.global_linear_velocity_average, _x.global_maximum_linear_velocity, _x.global_failures,) = _get_struct_h5dh().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_planner = str[start:end].decode('utf-8')
      else:
        self.global_planner = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.local_planner = str[start:end].decode('utf-8')
      else:
        self.local_planner = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sections = []
      for i in range(0, length):
        val1 = costum_msgs.msg.GoalInfo()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _x = val1
        start = end
        end += 66
        (_x.time_average, _x.distance_average, _x.velocity_average, _x.linear_velocity_average, _x.maximum_linear_velocity, _x.density, _x.max_obstacle_shiftment, _x.obstacle_length, _x.failures,) = _get_struct_8dh().unpack(str[start:end])
        self.sections.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.plan_file
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_h5dh().pack(_x.simulations, _x.global_time_average, _x.global_distance_average, _x.global_velocity_average, _x.global_linear_velocity_average, _x.global_maximum_linear_velocity, _x.global_failures))
      _x = self.global_planner
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.local_planner
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.sections)
      buff.write(_struct_I.pack(length))
      for val1 in self.sections:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_8dh().pack(_x.time_average, _x.distance_average, _x.velocity_average, _x.linear_velocity_average, _x.maximum_linear_velocity, _x.density, _x.max_obstacle_shiftment, _x.obstacle_length, _x.failures))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.sections is None:
        self.sections = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.plan_file = str[start:end].decode('utf-8')
      else:
        self.plan_file = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.date = str[start:end].decode('utf-8')
      else:
        self.date = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.simulations, _x.global_time_average, _x.global_distance_average, _x.global_velocity_average, _x.global_linear_velocity_average, _x.global_maximum_linear_velocity, _x.global_failures,) = _get_struct_h5dh().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_planner = str[start:end].decode('utf-8')
      else:
        self.global_planner = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.local_planner = str[start:end].decode('utf-8')
      else:
        self.local_planner = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sections = []
      for i in range(0, length):
        val1 = costum_msgs.msg.GoalInfo()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _x = val1
        start = end
        end += 66
        (_x.time_average, _x.distance_average, _x.velocity_average, _x.linear_velocity_average, _x.maximum_linear_velocity, _x.density, _x.max_obstacle_shiftment, _x.obstacle_length, _x.failures,) = _get_struct_8dh().unpack(str[start:end])
        self.sections.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h5dh = None
def _get_struct_h5dh():
    global _struct_h5dh
    if _struct_h5dh is None:
        _struct_h5dh = struct.Struct("<h5dh")
    return _struct_h5dh
_struct_8dh = None
def _get_struct_8dh():
    global _struct_8dh
    if _struct_8dh is None:
        _struct_8dh = struct.Struct("<8dh")
    return _struct_8dh
