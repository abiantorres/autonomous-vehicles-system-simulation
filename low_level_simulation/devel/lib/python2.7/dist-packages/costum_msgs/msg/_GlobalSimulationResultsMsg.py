# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from costum_msgs/GlobalSimulationResultsMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GlobalSimulationResultsMsg(genpy.Message):
  _md5sum = "6bde56eb7238c5489a8ee01bb10e22b4"
  _type = "costum_msgs/GlobalSimulationResultsMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 n_failures
float64 time_mean
float64 time_stdev
float64 time_max
float64 time_min
float64 distance_mean
float64 distance_stdev
float64 distance_max
float64 distance_min
float64 speed_mean
float64 speed_stdev
float64 speed_max
float64 speed_min
"""
  __slots__ = ['n_failures','time_mean','time_stdev','time_max','time_min','distance_mean','distance_stdev','distance_max','distance_min','speed_mean','speed_stdev','speed_max','speed_min']
  _slot_types = ['int64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       n_failures,time_mean,time_stdev,time_max,time_min,distance_mean,distance_stdev,distance_max,distance_min,speed_mean,speed_stdev,speed_max,speed_min

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GlobalSimulationResultsMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.n_failures is None:
        self.n_failures = 0
      if self.time_mean is None:
        self.time_mean = 0.
      if self.time_stdev is None:
        self.time_stdev = 0.
      if self.time_max is None:
        self.time_max = 0.
      if self.time_min is None:
        self.time_min = 0.
      if self.distance_mean is None:
        self.distance_mean = 0.
      if self.distance_stdev is None:
        self.distance_stdev = 0.
      if self.distance_max is None:
        self.distance_max = 0.
      if self.distance_min is None:
        self.distance_min = 0.
      if self.speed_mean is None:
        self.speed_mean = 0.
      if self.speed_stdev is None:
        self.speed_stdev = 0.
      if self.speed_max is None:
        self.speed_max = 0.
      if self.speed_min is None:
        self.speed_min = 0.
    else:
      self.n_failures = 0
      self.time_mean = 0.
      self.time_stdev = 0.
      self.time_max = 0.
      self.time_min = 0.
      self.distance_mean = 0.
      self.distance_stdev = 0.
      self.distance_max = 0.
      self.distance_min = 0.
      self.speed_mean = 0.
      self.speed_stdev = 0.
      self.speed_max = 0.
      self.speed_min = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q12d().pack(_x.n_failures, _x.time_mean, _x.time_stdev, _x.time_max, _x.time_min, _x.distance_mean, _x.distance_stdev, _x.distance_max, _x.distance_min, _x.speed_mean, _x.speed_stdev, _x.speed_max, _x.speed_min))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 104
      (_x.n_failures, _x.time_mean, _x.time_stdev, _x.time_max, _x.time_min, _x.distance_mean, _x.distance_stdev, _x.distance_max, _x.distance_min, _x.speed_mean, _x.speed_stdev, _x.speed_max, _x.speed_min,) = _get_struct_q12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q12d().pack(_x.n_failures, _x.time_mean, _x.time_stdev, _x.time_max, _x.time_min, _x.distance_mean, _x.distance_stdev, _x.distance_max, _x.distance_min, _x.speed_mean, _x.speed_stdev, _x.speed_max, _x.speed_min))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 104
      (_x.n_failures, _x.time_mean, _x.time_stdev, _x.time_max, _x.time_min, _x.distance_mean, _x.distance_stdev, _x.distance_max, _x.distance_min, _x.speed_mean, _x.speed_stdev, _x.speed_max, _x.speed_min,) = _get_struct_q12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q12d = None
def _get_struct_q12d():
    global _struct_q12d
    if _struct_q12d is None:
        _struct_q12d = struct.Struct("<q12d")
    return _struct_q12d
