// Generated by gencpp from file costum_msgs/SegmentMetadataMsg.msg
// DO NOT EDIT!


#ifndef COSTUM_MSGS_MESSAGE_SEGMENTMETADATAMSG_H
#define COSTUM_MSGS_MESSAGE_SEGMENTMETADATAMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace costum_msgs
{
template <class ContainerAllocator>
struct SegmentMetadataMsg_
{
  typedef SegmentMetadataMsg_<ContainerAllocator> Type;

  SegmentMetadataMsg_()
    : segment_index(0)
    , initial_point()
    , end_point()
    , distance_between_obstacles(0.0)
    , segment_simulation_timeout(0)  {
    }
  SegmentMetadataMsg_(const ContainerAllocator& _alloc)
    : segment_index(0)
    , initial_point(_alloc)
    , end_point(_alloc)
    , distance_between_obstacles(0.0)
    , segment_simulation_timeout(0)  {
  (void)_alloc;
    }



   typedef int64_t _segment_index_type;
  _segment_index_type segment_index;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _initial_point_type;
  _initial_point_type initial_point;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _end_point_type;
  _end_point_type end_point;

   typedef double _distance_between_obstacles_type;
  _distance_between_obstacles_type distance_between_obstacles;

   typedef int64_t _segment_simulation_timeout_type;
  _segment_simulation_timeout_type segment_simulation_timeout;





  typedef boost::shared_ptr< ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator> const> ConstPtr;

}; // struct SegmentMetadataMsg_

typedef ::costum_msgs::SegmentMetadataMsg_<std::allocator<void> > SegmentMetadataMsg;

typedef boost::shared_ptr< ::costum_msgs::SegmentMetadataMsg > SegmentMetadataMsgPtr;
typedef boost::shared_ptr< ::costum_msgs::SegmentMetadataMsg const> SegmentMetadataMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace costum_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'costum_msgs': ['/home/abiantorres/Documentos/tfg/autonomous-vehicles-system-simulation/low_level_simulation/src/costum_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b238c42fedf53903e2cf5776ff7562f0";
  }

  static const char* value(const ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb238c42fedf53903ULL;
  static const uint64_t static_value2 = 0xe2cf5776ff7562f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "costum_msgs/SegmentMetadataMsg";
  }

  static const char* value(const ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 segment_index\n\
geometry_msgs/Point initial_point\n\
geometry_msgs/Point end_point\n\
float64 distance_between_obstacles\n\
int64 segment_simulation_timeout\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.segment_index);
      stream.next(m.initial_point);
      stream.next(m.end_point);
      stream.next(m.distance_between_obstacles);
      stream.next(m.segment_simulation_timeout);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SegmentMetadataMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::costum_msgs::SegmentMetadataMsg_<ContainerAllocator>& v)
  {
    s << indent << "segment_index: ";
    Printer<int64_t>::stream(s, indent + "  ", v.segment_index);
    s << indent << "initial_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.initial_point);
    s << indent << "end_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.end_point);
    s << indent << "distance_between_obstacles: ";
    Printer<double>::stream(s, indent + "  ", v.distance_between_obstacles);
    s << indent << "segment_simulation_timeout: ";
    Printer<int64_t>::stream(s, indent + "  ", v.segment_simulation_timeout);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COSTUM_MSGS_MESSAGE_SEGMENTMETADATAMSG_H
