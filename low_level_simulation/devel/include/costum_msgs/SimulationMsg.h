// Generated by gencpp from file costum_msgs/SimulationMsg.msg
// DO NOT EDIT!


#ifndef COSTUM_MSGS_MESSAGE_SIMULATIONMSG_H
#define COSTUM_MSGS_MESSAGE_SIMULATIONMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <costum_msgs/SimulationMetadataMsg.h>
#include <costum_msgs/GlobalSimulationResultsMsg.h>
#include <costum_msgs/GlobalSegmentResultsMsg.h>
#include <costum_msgs/IndividualIterationResultsMsg.h>

namespace costum_msgs
{
template <class ContainerAllocator>
struct SimulationMsg_
{
  typedef SimulationMsg_<ContainerAllocator> Type;

  SimulationMsg_()
    : metadata()
    , global_simulation_results()
    , global_segments_results()
    , individual_iterations_results()  {
    }
  SimulationMsg_(const ContainerAllocator& _alloc)
    : metadata(_alloc)
    , global_simulation_results(_alloc)
    , global_segments_results(_alloc)
    , individual_iterations_results(_alloc)  {
  (void)_alloc;
    }



   typedef  ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator>  _metadata_type;
  _metadata_type metadata;

   typedef  ::costum_msgs::GlobalSimulationResultsMsg_<ContainerAllocator>  _global_simulation_results_type;
  _global_simulation_results_type global_simulation_results;

   typedef std::vector< ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> >::other >  _global_segments_results_type;
  _global_segments_results_type global_segments_results;

   typedef std::vector< ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> >::other >  _individual_iterations_results_type;
  _individual_iterations_results_type individual_iterations_results;





  typedef boost::shared_ptr< ::costum_msgs::SimulationMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::costum_msgs::SimulationMsg_<ContainerAllocator> const> ConstPtr;

}; // struct SimulationMsg_

typedef ::costum_msgs::SimulationMsg_<std::allocator<void> > SimulationMsg;

typedef boost::shared_ptr< ::costum_msgs::SimulationMsg > SimulationMsgPtr;
typedef boost::shared_ptr< ::costum_msgs::SimulationMsg const> SimulationMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::costum_msgs::SimulationMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::costum_msgs::SimulationMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace costum_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'costum_msgs': ['/home/abiantorres/Documentos/tfg/autonomous-vehicles-system-simulation/low_level_simulation/src/costum_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::costum_msgs::SimulationMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::costum_msgs::SimulationMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costum_msgs::SimulationMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costum_msgs::SimulationMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costum_msgs::SimulationMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costum_msgs::SimulationMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::costum_msgs::SimulationMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1db179749f1d9c58be4915f56104bf18";
  }

  static const char* value(const ::costum_msgs::SimulationMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1db179749f1d9c58ULL;
  static const uint64_t static_value2 = 0xbe4915f56104bf18ULL;
};

template<class ContainerAllocator>
struct DataType< ::costum_msgs::SimulationMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "costum_msgs/SimulationMsg";
  }

  static const char* value(const ::costum_msgs::SimulationMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::costum_msgs::SimulationMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "SimulationMetadataMsg metadata\n\
GlobalSimulationResultsMsg global_simulation_results\n\
GlobalSegmentResultsMsg[] global_segments_results\n\
IndividualIterationResultsMsg[] individual_iterations_results\n\
\n\
================================================================================\n\
MSG: costum_msgs/SimulationMetadataMsg\n\
string plan_file\n\
string date\n\
int64 n_segments\n\
int64 n_iterations\n\
int64 simulation_timeout\n\
float64 distance_between_obstacles\n\
bool useful_simulation\n\
string local_planner\n\
string global_planner\n\
\n\
================================================================================\n\
MSG: costum_msgs/GlobalSimulationResultsMsg\n\
int64 n_failures\n\
float64 time_mean\n\
float64 time_stdev\n\
float64 time_max\n\
float64 time_min\n\
float64 distance_mean\n\
float64 distance_stdev\n\
float64 distance_max\n\
float64 distance_min\n\
float64 speed_mean\n\
float64 speed_stdev\n\
float64 speed_max\n\
float64 speed_min\n\
\n\
================================================================================\n\
MSG: costum_msgs/GlobalSegmentResultsMsg\n\
int64 segment_index\n\
int64 n_failures\n\
float64 time_mean\n\
float64 time_stdev\n\
float64 time_max\n\
float64 time_min\n\
float64 distance_mean\n\
float64 distance_stdev\n\
float64 distance_max\n\
float64 distance_min\n\
float64 speed_mean\n\
float64 speed_stdev\n\
float64 speed_max\n\
float64 speed_min\n\
\n\
================================================================================\n\
MSG: costum_msgs/IndividualIterationResultsMsg\n\
int64 iteration_index\n\
bool failure\n\
int64 failure_segment_index\n\
float64 time\n\
float64 distance\n\
float64 speed\n\
IndividualSegmentResultsMsg[] segments_results\n\
\n\
================================================================================\n\
MSG: costum_msgs/IndividualSegmentResultsMsg\n\
int64 segment_index\n\
float64 time\n\
float64 distance\n\
float64 speed\n\
bool failure\n\
";
  }

  static const char* value(const ::costum_msgs::SimulationMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::costum_msgs::SimulationMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.metadata);
      stream.next(m.global_simulation_results);
      stream.next(m.global_segments_results);
      stream.next(m.individual_iterations_results);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimulationMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::costum_msgs::SimulationMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::costum_msgs::SimulationMsg_<ContainerAllocator>& v)
  {
    s << indent << "metadata: ";
    s << std::endl;
    Printer< ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.metadata);
    s << indent << "global_simulation_results: ";
    s << std::endl;
    Printer< ::costum_msgs::GlobalSimulationResultsMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.global_simulation_results);
    s << indent << "global_segments_results[]" << std::endl;
    for (size_t i = 0; i < v.global_segments_results.size(); ++i)
    {
      s << indent << "  global_segments_results[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> >::stream(s, indent + "    ", v.global_segments_results[i]);
    }
    s << indent << "individual_iterations_results[]" << std::endl;
    for (size_t i = 0; i < v.individual_iterations_results.size(); ++i)
    {
      s << indent << "  individual_iterations_results[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> >::stream(s, indent + "    ", v.individual_iterations_results[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COSTUM_MSGS_MESSAGE_SIMULATIONMSG_H
