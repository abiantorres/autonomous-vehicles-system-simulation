// Generated by gencpp from file costum_msgs/GlobalSegmentResultsMsg.msg
// DO NOT EDIT!


#ifndef COSTUM_MSGS_MESSAGE_GLOBALSEGMENTRESULTSMSG_H
#define COSTUM_MSGS_MESSAGE_GLOBALSEGMENTRESULTSMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace costum_msgs
{
template <class ContainerAllocator>
struct GlobalSegmentResultsMsg_
{
  typedef GlobalSegmentResultsMsg_<ContainerAllocator> Type;

  GlobalSegmentResultsMsg_()
    : segment_index(0)
    , n_failures(0)
    , time_mean(0.0)
    , time_stdev(0.0)
    , time_max(0.0)
    , time_min(0.0)
    , distance_mean(0.0)
    , distance_stdev(0.0)
    , distance_max(0.0)
    , distance_min(0.0)
    , speed_mean(0.0)
    , speed_stdev(0.0)
    , speed_max(0.0)
    , speed_min(0.0)  {
    }
  GlobalSegmentResultsMsg_(const ContainerAllocator& _alloc)
    : segment_index(0)
    , n_failures(0)
    , time_mean(0.0)
    , time_stdev(0.0)
    , time_max(0.0)
    , time_min(0.0)
    , distance_mean(0.0)
    , distance_stdev(0.0)
    , distance_max(0.0)
    , distance_min(0.0)
    , speed_mean(0.0)
    , speed_stdev(0.0)
    , speed_max(0.0)
    , speed_min(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _segment_index_type;
  _segment_index_type segment_index;

   typedef int64_t _n_failures_type;
  _n_failures_type n_failures;

   typedef double _time_mean_type;
  _time_mean_type time_mean;

   typedef double _time_stdev_type;
  _time_stdev_type time_stdev;

   typedef double _time_max_type;
  _time_max_type time_max;

   typedef double _time_min_type;
  _time_min_type time_min;

   typedef double _distance_mean_type;
  _distance_mean_type distance_mean;

   typedef double _distance_stdev_type;
  _distance_stdev_type distance_stdev;

   typedef double _distance_max_type;
  _distance_max_type distance_max;

   typedef double _distance_min_type;
  _distance_min_type distance_min;

   typedef double _speed_mean_type;
  _speed_mean_type speed_mean;

   typedef double _speed_stdev_type;
  _speed_stdev_type speed_stdev;

   typedef double _speed_max_type;
  _speed_max_type speed_max;

   typedef double _speed_min_type;
  _speed_min_type speed_min;





  typedef boost::shared_ptr< ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> const> ConstPtr;

}; // struct GlobalSegmentResultsMsg_

typedef ::costum_msgs::GlobalSegmentResultsMsg_<std::allocator<void> > GlobalSegmentResultsMsg;

typedef boost::shared_ptr< ::costum_msgs::GlobalSegmentResultsMsg > GlobalSegmentResultsMsgPtr;
typedef boost::shared_ptr< ::costum_msgs::GlobalSegmentResultsMsg const> GlobalSegmentResultsMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace costum_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'costum_msgs': ['/home/abiantorres/Documentos/tfg/autonomous-vehicles-system-simulation/low_level_simulation/src/costum_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c71ff6a13e6428908623dac9d5859650";
  }

  static const char* value(const ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc71ff6a13e642890ULL;
  static const uint64_t static_value2 = 0x8623dac9d5859650ULL;
};

template<class ContainerAllocator>
struct DataType< ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "costum_msgs/GlobalSegmentResultsMsg";
  }

  static const char* value(const ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 segment_index\n\
int64 n_failures\n\
float64 time_mean\n\
float64 time_stdev\n\
float64 time_max\n\
float64 time_min\n\
float64 distance_mean\n\
float64 distance_stdev\n\
float64 distance_max\n\
float64 distance_min\n\
float64 speed_mean\n\
float64 speed_stdev\n\
float64 speed_max\n\
float64 speed_min\n\
";
  }

  static const char* value(const ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.segment_index);
      stream.next(m.n_failures);
      stream.next(m.time_mean);
      stream.next(m.time_stdev);
      stream.next(m.time_max);
      stream.next(m.time_min);
      stream.next(m.distance_mean);
      stream.next(m.distance_stdev);
      stream.next(m.distance_max);
      stream.next(m.distance_min);
      stream.next(m.speed_mean);
      stream.next(m.speed_stdev);
      stream.next(m.speed_max);
      stream.next(m.speed_min);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GlobalSegmentResultsMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::costum_msgs::GlobalSegmentResultsMsg_<ContainerAllocator>& v)
  {
    s << indent << "segment_index: ";
    Printer<int64_t>::stream(s, indent + "  ", v.segment_index);
    s << indent << "n_failures: ";
    Printer<int64_t>::stream(s, indent + "  ", v.n_failures);
    s << indent << "time_mean: ";
    Printer<double>::stream(s, indent + "  ", v.time_mean);
    s << indent << "time_stdev: ";
    Printer<double>::stream(s, indent + "  ", v.time_stdev);
    s << indent << "time_max: ";
    Printer<double>::stream(s, indent + "  ", v.time_max);
    s << indent << "time_min: ";
    Printer<double>::stream(s, indent + "  ", v.time_min);
    s << indent << "distance_mean: ";
    Printer<double>::stream(s, indent + "  ", v.distance_mean);
    s << indent << "distance_stdev: ";
    Printer<double>::stream(s, indent + "  ", v.distance_stdev);
    s << indent << "distance_max: ";
    Printer<double>::stream(s, indent + "  ", v.distance_max);
    s << indent << "distance_min: ";
    Printer<double>::stream(s, indent + "  ", v.distance_min);
    s << indent << "speed_mean: ";
    Printer<double>::stream(s, indent + "  ", v.speed_mean);
    s << indent << "speed_stdev: ";
    Printer<double>::stream(s, indent + "  ", v.speed_stdev);
    s << indent << "speed_max: ";
    Printer<double>::stream(s, indent + "  ", v.speed_max);
    s << indent << "speed_min: ";
    Printer<double>::stream(s, indent + "  ", v.speed_min);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COSTUM_MSGS_MESSAGE_GLOBALSEGMENTRESULTSMSG_H
