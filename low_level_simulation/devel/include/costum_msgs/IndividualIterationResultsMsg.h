// Generated by gencpp from file costum_msgs/IndividualIterationResultsMsg.msg
// DO NOT EDIT!


#ifndef COSTUM_MSGS_MESSAGE_INDIVIDUALITERATIONRESULTSMSG_H
#define COSTUM_MSGS_MESSAGE_INDIVIDUALITERATIONRESULTSMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <costum_msgs/IndividualSegmentResultsMsg.h>

namespace costum_msgs
{
template <class ContainerAllocator>
struct IndividualIterationResultsMsg_
{
  typedef IndividualIterationResultsMsg_<ContainerAllocator> Type;

  IndividualIterationResultsMsg_()
    : iteration_index(0)
    , failure(false)
    , failure_segment_index(0)
    , time(0.0)
    , distance(0.0)
    , speed(0.0)
    , segments_results()  {
    }
  IndividualIterationResultsMsg_(const ContainerAllocator& _alloc)
    : iteration_index(0)
    , failure(false)
    , failure_segment_index(0)
    , time(0.0)
    , distance(0.0)
    , speed(0.0)
    , segments_results(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _iteration_index_type;
  _iteration_index_type iteration_index;

   typedef uint8_t _failure_type;
  _failure_type failure;

   typedef int64_t _failure_segment_index_type;
  _failure_segment_index_type failure_segment_index;

   typedef double _time_type;
  _time_type time;

   typedef double _distance_type;
  _distance_type distance;

   typedef double _speed_type;
  _speed_type speed;

   typedef std::vector< ::costum_msgs::IndividualSegmentResultsMsg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::costum_msgs::IndividualSegmentResultsMsg_<ContainerAllocator> >::other >  _segments_results_type;
  _segments_results_type segments_results;





  typedef boost::shared_ptr< ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> const> ConstPtr;

}; // struct IndividualIterationResultsMsg_

typedef ::costum_msgs::IndividualIterationResultsMsg_<std::allocator<void> > IndividualIterationResultsMsg;

typedef boost::shared_ptr< ::costum_msgs::IndividualIterationResultsMsg > IndividualIterationResultsMsgPtr;
typedef boost::shared_ptr< ::costum_msgs::IndividualIterationResultsMsg const> IndividualIterationResultsMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace costum_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'costum_msgs': ['/home/abiantorres/Documentos/tfg/autonomous-vehicles-system-simulation/low_level_simulation/src/costum_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "823819fb8874f57d0dd2530f62254e3d";
  }

  static const char* value(const ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x823819fb8874f57dULL;
  static const uint64_t static_value2 = 0x0dd2530f62254e3dULL;
};

template<class ContainerAllocator>
struct DataType< ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "costum_msgs/IndividualIterationResultsMsg";
  }

  static const char* value(const ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 iteration_index\n\
bool failure\n\
int64 failure_segment_index\n\
float64 time\n\
float64 distance\n\
float64 speed\n\
IndividualSegmentResultsMsg[] segments_results\n\
\n\
================================================================================\n\
MSG: costum_msgs/IndividualSegmentResultsMsg\n\
int64 segment_index\n\
float64 time\n\
float64 distance\n\
float64 speed\n\
bool failure\n\
";
  }

  static const char* value(const ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.iteration_index);
      stream.next(m.failure);
      stream.next(m.failure_segment_index);
      stream.next(m.time);
      stream.next(m.distance);
      stream.next(m.speed);
      stream.next(m.segments_results);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IndividualIterationResultsMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::costum_msgs::IndividualIterationResultsMsg_<ContainerAllocator>& v)
  {
    s << indent << "iteration_index: ";
    Printer<int64_t>::stream(s, indent + "  ", v.iteration_index);
    s << indent << "failure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failure);
    s << indent << "failure_segment_index: ";
    Printer<int64_t>::stream(s, indent + "  ", v.failure_segment_index);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "segments_results[]" << std::endl;
    for (size_t i = 0; i < v.segments_results.size(); ++i)
    {
      s << indent << "  segments_results[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::costum_msgs::IndividualSegmentResultsMsg_<ContainerAllocator> >::stream(s, indent + "    ", v.segments_results[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COSTUM_MSGS_MESSAGE_INDIVIDUALITERATIONRESULTSMSG_H
