// Generated by gencpp from file costum_msgs/SimulationMetadataMsg.msg
// DO NOT EDIT!


#ifndef COSTUM_MSGS_MESSAGE_SIMULATIONMETADATAMSG_H
#define COSTUM_MSGS_MESSAGE_SIMULATIONMETADATAMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace costum_msgs
{
template <class ContainerAllocator>
struct SimulationMetadataMsg_
{
  typedef SimulationMetadataMsg_<ContainerAllocator> Type;

  SimulationMetadataMsg_()
    : plan_file()
    , date()
    , n_segments(0)
    , n_iterations(0)
    , simulation_timeout(0)
    , distance_between_obstacles(0.0)
    , useful_simulation(false)
    , local_planner()
    , global_planner()  {
    }
  SimulationMetadataMsg_(const ContainerAllocator& _alloc)
    : plan_file(_alloc)
    , date(_alloc)
    , n_segments(0)
    , n_iterations(0)
    , simulation_timeout(0)
    , distance_between_obstacles(0.0)
    , useful_simulation(false)
    , local_planner(_alloc)
    , global_planner(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _plan_file_type;
  _plan_file_type plan_file;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _date_type;
  _date_type date;

   typedef int64_t _n_segments_type;
  _n_segments_type n_segments;

   typedef int64_t _n_iterations_type;
  _n_iterations_type n_iterations;

   typedef int64_t _simulation_timeout_type;
  _simulation_timeout_type simulation_timeout;

   typedef double _distance_between_obstacles_type;
  _distance_between_obstacles_type distance_between_obstacles;

   typedef uint8_t _useful_simulation_type;
  _useful_simulation_type useful_simulation;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _local_planner_type;
  _local_planner_type local_planner;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _global_planner_type;
  _global_planner_type global_planner;





  typedef boost::shared_ptr< ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator> const> ConstPtr;

}; // struct SimulationMetadataMsg_

typedef ::costum_msgs::SimulationMetadataMsg_<std::allocator<void> > SimulationMetadataMsg;

typedef boost::shared_ptr< ::costum_msgs::SimulationMetadataMsg > SimulationMetadataMsgPtr;
typedef boost::shared_ptr< ::costum_msgs::SimulationMetadataMsg const> SimulationMetadataMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace costum_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'costum_msgs': ['/home/abiantorres/Documentos/tfg/autonomous-vehicles-system-simulation/low_level_simulation/src/costum_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6204327964663f21015d923ee7818638";
  }

  static const char* value(const ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6204327964663f21ULL;
  static const uint64_t static_value2 = 0x015d923ee7818638ULL;
};

template<class ContainerAllocator>
struct DataType< ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "costum_msgs/SimulationMetadataMsg";
  }

  static const char* value(const ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string plan_file\n\
string date\n\
int64 n_segments\n\
int64 n_iterations\n\
int64 simulation_timeout\n\
float64 distance_between_obstacles\n\
bool useful_simulation\n\
string local_planner\n\
string global_planner\n\
";
  }

  static const char* value(const ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.plan_file);
      stream.next(m.date);
      stream.next(m.n_segments);
      stream.next(m.n_iterations);
      stream.next(m.simulation_timeout);
      stream.next(m.distance_between_obstacles);
      stream.next(m.useful_simulation);
      stream.next(m.local_planner);
      stream.next(m.global_planner);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimulationMetadataMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::costum_msgs::SimulationMetadataMsg_<ContainerAllocator>& v)
  {
    s << indent << "plan_file: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.plan_file);
    s << indent << "date: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.date);
    s << indent << "n_segments: ";
    Printer<int64_t>::stream(s, indent + "  ", v.n_segments);
    s << indent << "n_iterations: ";
    Printer<int64_t>::stream(s, indent + "  ", v.n_iterations);
    s << indent << "simulation_timeout: ";
    Printer<int64_t>::stream(s, indent + "  ", v.simulation_timeout);
    s << indent << "distance_between_obstacles: ";
    Printer<double>::stream(s, indent + "  ", v.distance_between_obstacles);
    s << indent << "useful_simulation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.useful_simulation);
    s << indent << "local_planner: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.local_planner);
    s << indent << "global_planner: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.global_planner);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COSTUM_MSGS_MESSAGE_SIMULATIONMETADATAMSG_H
