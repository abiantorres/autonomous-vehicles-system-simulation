// Generated by gencpp from file costum_msgs/GoalInfo.msg
// DO NOT EDIT!


#ifndef COSTUM_MSGS_MESSAGE_GOALINFO_H
#define COSTUM_MSGS_MESSAGE_GOALINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace costum_msgs
{
template <class ContainerAllocator>
struct GoalInfo_
{
  typedef GoalInfo_<ContainerAllocator> Type;

  GoalInfo_()
    : x_position(0.0)
    , y_position(0.0)
    , z_position(0.0)
    , x_orientation(0.0)
    , y_orientation(0.0)
    , z_orientation(0.0)
    , w_orientation(0.0)
    , time(0.0)  {
    }
  GoalInfo_(const ContainerAllocator& _alloc)
    : x_position(0.0)
    , y_position(0.0)
    , z_position(0.0)
    , x_orientation(0.0)
    , y_orientation(0.0)
    , z_orientation(0.0)
    , w_orientation(0.0)
    , time(0.0)  {
  (void)_alloc;
    }



   typedef double _x_position_type;
  _x_position_type x_position;

   typedef double _y_position_type;
  _y_position_type y_position;

   typedef double _z_position_type;
  _z_position_type z_position;

   typedef double _x_orientation_type;
  _x_orientation_type x_orientation;

   typedef double _y_orientation_type;
  _y_orientation_type y_orientation;

   typedef double _z_orientation_type;
  _z_orientation_type z_orientation;

   typedef double _w_orientation_type;
  _w_orientation_type w_orientation;

   typedef double _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::costum_msgs::GoalInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::costum_msgs::GoalInfo_<ContainerAllocator> const> ConstPtr;

}; // struct GoalInfo_

typedef ::costum_msgs::GoalInfo_<std::allocator<void> > GoalInfo;

typedef boost::shared_ptr< ::costum_msgs::GoalInfo > GoalInfoPtr;
typedef boost::shared_ptr< ::costum_msgs::GoalInfo const> GoalInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::costum_msgs::GoalInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::costum_msgs::GoalInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace costum_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'costum_msgs': ['/home/parallels/tfg/autonomous-vehicles-system-simulation/low_level_simulation/src/costum_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::costum_msgs::GoalInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::costum_msgs::GoalInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costum_msgs::GoalInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costum_msgs::GoalInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costum_msgs::GoalInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costum_msgs::GoalInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::costum_msgs::GoalInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c2161efb882ab714cdc912beb12392f";
  }

  static const char* value(const ::costum_msgs::GoalInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c2161efb882ab71ULL;
  static const uint64_t static_value2 = 0x4cdc912beb12392fULL;
};

template<class ContainerAllocator>
struct DataType< ::costum_msgs::GoalInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "costum_msgs/GoalInfo";
  }

  static const char* value(const ::costum_msgs::GoalInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::costum_msgs::GoalInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x_position\n\
float64 y_position\n\
float64 z_position\n\
float64 x_orientation\n\
float64 y_orientation\n\
float64 z_orientation\n\
float64 w_orientation\n\
float64 time\n\
";
  }

  static const char* value(const ::costum_msgs::GoalInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::costum_msgs::GoalInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_position);
      stream.next(m.y_position);
      stream.next(m.z_position);
      stream.next(m.x_orientation);
      stream.next(m.y_orientation);
      stream.next(m.z_orientation);
      stream.next(m.w_orientation);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoalInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::costum_msgs::GoalInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::costum_msgs::GoalInfo_<ContainerAllocator>& v)
  {
    s << indent << "x_position: ";
    Printer<double>::stream(s, indent + "  ", v.x_position);
    s << indent << "y_position: ";
    Printer<double>::stream(s, indent + "  ", v.y_position);
    s << indent << "z_position: ";
    Printer<double>::stream(s, indent + "  ", v.z_position);
    s << indent << "x_orientation: ";
    Printer<double>::stream(s, indent + "  ", v.x_orientation);
    s << indent << "y_orientation: ";
    Printer<double>::stream(s, indent + "  ", v.y_orientation);
    s << indent << "z_orientation: ";
    Printer<double>::stream(s, indent + "  ", v.z_orientation);
    s << indent << "w_orientation: ";
    Printer<double>::stream(s, indent + "  ", v.w_orientation);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COSTUM_MSGS_MESSAGE_GOALINFO_H
