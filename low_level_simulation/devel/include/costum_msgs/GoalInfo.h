// Generated by gencpp from file costum_msgs/GoalInfo.msg
// DO NOT EDIT!


#ifndef COSTUM_MSGS_MESSAGE_GOALINFO_H
#define COSTUM_MSGS_MESSAGE_GOALINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace costum_msgs
{
template <class ContainerAllocator>
struct GoalInfo_
{
  typedef GoalInfo_<ContainerAllocator> Type;

  GoalInfo_()
    : id()
    , time_average(0.0)
    , time_standard_deviation(0.0)
    , distance_average(0.0)
    , velocity_average(0.0)
    , linear_velocity_average(0.0)
    , maximum_linear_velocity(0.0)
    , density(0.0)
    , max_obstacle_shiftment(0.0)
    , obstacle_length(0.0)
    , failures(0)  {
    }
  GoalInfo_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , time_average(0.0)
    , time_standard_deviation(0.0)
    , distance_average(0.0)
    , velocity_average(0.0)
    , linear_velocity_average(0.0)
    , maximum_linear_velocity(0.0)
    , density(0.0)
    , max_obstacle_shiftment(0.0)
    , obstacle_length(0.0)
    , failures(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef double _time_average_type;
  _time_average_type time_average;

   typedef double _time_standard_deviation_type;
  _time_standard_deviation_type time_standard_deviation;

   typedef double _distance_average_type;
  _distance_average_type distance_average;

   typedef double _velocity_average_type;
  _velocity_average_type velocity_average;

   typedef double _linear_velocity_average_type;
  _linear_velocity_average_type linear_velocity_average;

   typedef double _maximum_linear_velocity_type;
  _maximum_linear_velocity_type maximum_linear_velocity;

   typedef double _density_type;
  _density_type density;

   typedef double _max_obstacle_shiftment_type;
  _max_obstacle_shiftment_type max_obstacle_shiftment;

   typedef double _obstacle_length_type;
  _obstacle_length_type obstacle_length;

   typedef int16_t _failures_type;
  _failures_type failures;





  typedef boost::shared_ptr< ::costum_msgs::GoalInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::costum_msgs::GoalInfo_<ContainerAllocator> const> ConstPtr;

}; // struct GoalInfo_

typedef ::costum_msgs::GoalInfo_<std::allocator<void> > GoalInfo;

typedef boost::shared_ptr< ::costum_msgs::GoalInfo > GoalInfoPtr;
typedef boost::shared_ptr< ::costum_msgs::GoalInfo const> GoalInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::costum_msgs::GoalInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::costum_msgs::GoalInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace costum_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'costum_msgs': ['/home/parallels/tfg/autonomous-vehicles-system-simulation/low_level_simulation/src/costum_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::costum_msgs::GoalInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::costum_msgs::GoalInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costum_msgs::GoalInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::costum_msgs::GoalInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costum_msgs::GoalInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::costum_msgs::GoalInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::costum_msgs::GoalInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5759e1e10a4cf0239c09042d29b09f8";
  }

  static const char* value(const ::costum_msgs::GoalInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5759e1e10a4cf02ULL;
  static const uint64_t static_value2 = 0x39c09042d29b09f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::costum_msgs::GoalInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "costum_msgs/GoalInfo";
  }

  static const char* value(const ::costum_msgs::GoalInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::costum_msgs::GoalInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n\
float64 time_average\n\
float64 time_standard_deviation\n\
float64 distance_average\n\
float64 velocity_average\n\
float64 linear_velocity_average\n\
float64 maximum_linear_velocity\n\
float64 density\n\
float64 max_obstacle_shiftment\n\
float64 obstacle_length\n\
int16 failures\n\
";
  }

  static const char* value(const ::costum_msgs::GoalInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::costum_msgs::GoalInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.time_average);
      stream.next(m.time_standard_deviation);
      stream.next(m.distance_average);
      stream.next(m.velocity_average);
      stream.next(m.linear_velocity_average);
      stream.next(m.maximum_linear_velocity);
      stream.next(m.density);
      stream.next(m.max_obstacle_shiftment);
      stream.next(m.obstacle_length);
      stream.next(m.failures);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoalInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::costum_msgs::GoalInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::costum_msgs::GoalInfo_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "time_average: ";
    Printer<double>::stream(s, indent + "  ", v.time_average);
    s << indent << "time_standard_deviation: ";
    Printer<double>::stream(s, indent + "  ", v.time_standard_deviation);
    s << indent << "distance_average: ";
    Printer<double>::stream(s, indent + "  ", v.distance_average);
    s << indent << "velocity_average: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_average);
    s << indent << "linear_velocity_average: ";
    Printer<double>::stream(s, indent + "  ", v.linear_velocity_average);
    s << indent << "maximum_linear_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.maximum_linear_velocity);
    s << indent << "density: ";
    Printer<double>::stream(s, indent + "  ", v.density);
    s << indent << "max_obstacle_shiftment: ";
    Printer<double>::stream(s, indent + "  ", v.max_obstacle_shiftment);
    s << indent << "obstacle_length: ";
    Printer<double>::stream(s, indent + "  ", v.obstacle_length);
    s << indent << "failures: ";
    Printer<int16_t>::stream(s, indent + "  ", v.failures);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COSTUM_MSGS_MESSAGE_GOALINFO_H
